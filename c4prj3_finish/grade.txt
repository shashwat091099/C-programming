Grading at Fri Jul  3 16:55:26 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 20000
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==701== Memcheck, a memory error detector
==701== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==701== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==701== Command: ./poker inp.txt 25000
==701== Parent PID: 700
==701== 
==701== Invalid read of size 8
==701==    at 0x40188D: is_n_length_straight_at (eval.c:114)
==701==    by 0x40210A: is_ace_low_straight_at (eval.c:154)
==701==    by 0x40210A: is_straight_at (eval.c:168)
==701==    by 0x40210A: find_straight (eval.c:306)
==701==    by 0x4022E3: evaluate_hand (eval.c:337)
==701==    by 0x402EB2: compare_hands (eval.c:208)
==701==    by 0x4033FB: win_hand (main.c:20)
==701==    by 0x400A9B: main (main.c:71)
==701==  Address 0x5206458 is 0 bytes after a block of size 56 alloc'd
==701==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==701==    by 0x4011CE: add_card_to (deck.c:40)
==701==    by 0x4011CE: add_empty_card (deck.c:49)
==701==    by 0x4031DB: hand_from_string (input.c:35)
==701==    by 0x4032C7: read_input (input.c:75)
==701==    by 0x400A1D: main (main.c:57)
==701== 
==701== Invalid read of size 4
==701==    at 0x401892: is_n_length_straight_at (eval.c:113)
==701==    by 0x40210A: is_ace_low_straight_at (eval.c:154)
==701==    by 0x40210A: is_straight_at (eval.c:168)
==701==    by 0x40210A: find_straight (eval.c:306)
==701==    by 0x4022E3: evaluate_hand (eval.c:337)
==701==    by 0x402EB2: compare_hands (eval.c:208)
==701==    by 0x4033FB: win_hand (main.c:20)
==701==    by 0x400A9B: main (main.c:71)
==701==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==701== 
==701== 
==701== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==701==  Access not within mapped region at address 0x0
==701==    at 0x401892: is_n_length_straight_at (eval.c:113)
==701==    by 0x40210A: is_ace_low_straight_at (eval.c:154)
==701==    by 0x40210A: is_straight_at (eval.c:168)
==701==    by 0x40210A: find_straight (eval.c:306)
==701==    by 0x4022E3: evaluate_hand (eval.c:337)
==701==    by 0x402EB2: compare_hands (eval.c:208)
==701==    by 0x4033FB: win_hand (main.c:20)
==701==    by 0x400A9B: main (main.c:71)
==701==  If you believe this happened as a result of a stack
==701==  overflow in your program's main thread (unlikely but
==701==  possible), you can try to increase the size of the
==701==  main thread stack using the --main-stacksize= flag.
==701==  The main thread stack size used in this run was 8388608.
==701== 
==701== HEAP SUMMARY:
==701==     in use at exit: 2,304 bytes in 107 blocks
==701==   total heap usage: 2,734 allocs, 2,627 frees, 88,276 bytes allocated
==701== 
==701== LEAK SUMMARY:
==701==    definitely lost: 16 bytes in 1 blocks
==701==    indirectly lost: 336 bytes in 22 blocks
==701==      possibly lost: 0 bytes in 0 blocks
==701==    still reachable: 1,952 bytes in 84 blocks
==701==         suppressed: 0 bytes in 0 blocks
==701== Rerun with --leak-check=full to see details of leaked memory
==701== 
==701== For counts of detected and suppressed errors, rerun with: -v
==701== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 25000
Running a simulation with 25000 draws for 2 hands...
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 25000
Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==799== Memcheck, a memory error detector
==799== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==799== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==799== Command: ./poker inp3.txt 80000
==799== Parent PID: 798
==799== 
==799== Invalid read of size 8
==799==    at 0x40188D: is_n_length_straight_at (eval.c:114)
==799==    by 0x40210A: is_ace_low_straight_at (eval.c:154)
==799==    by 0x40210A: is_straight_at (eval.c:168)
==799==    by 0x40210A: find_straight (eval.c:306)
==799==    by 0x4022E3: evaluate_hand (eval.c:337)
==799==    by 0x402EA2: compare_hands (eval.c:207)
==799==    by 0x4033FB: win_hand (main.c:20)
==799==    by 0x400A9B: main (main.c:71)
==799==  Address 0x5205998 is 0 bytes after a block of size 56 alloc'd
==799==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==799==    by 0x4011CE: add_card_to (deck.c:40)
==799==    by 0x4011CE: add_empty_card (deck.c:49)
==799==    by 0x4031DB: hand_from_string (input.c:35)
==799==    by 0x4032C7: read_input (input.c:75)
==799==    by 0x400A1D: main (main.c:57)
==799== 
==799== Invalid read of size 4
==799==    at 0x401892: is_n_length_straight_at (eval.c:113)
==799==    by 0x40210A: is_ace_low_straight_at (eval.c:154)
==799==    by 0x40210A: is_straight_at (eval.c:168)
==799==    by 0x40210A: find_straight (eval.c:306)
==799==    by 0x4022E3: evaluate_hand (eval.c:337)
==799==    by 0x402EA2: compare_hands (eval.c:207)
==799==    by 0x4033FB: win_hand (main.c:20)
==799==    by 0x400A9B: main (main.c:71)
==799==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==799== 
==799== 
==799== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==799==  Access not within mapped region at address 0x0
==799==    at 0x401892: is_n_length_straight_at (eval.c:113)
==799==    by 0x40210A: is_ace_low_straight_at (eval.c:154)
==799==    by 0x40210A: is_straight_at (eval.c:168)
==799==    by 0x40210A: find_straight (eval.c:306)
==799==    by 0x4022E3: evaluate_hand (eval.c:337)
==799==    by 0x402EA2: compare_hands (eval.c:207)
==799==    by 0x4033FB: win_hand (main.c:20)
==799==    by 0x400A9B: main (main.c:71)
==799==  If you believe this happened as a result of a stack
==799==  overflow in your program's main thread (unlikely but
==799==  possible), you can try to increase the size of the
==799==  main thread stack using the --main-stacksize= flag.
==799==  The main thread stack size used in this run was 8388608.
==799== 
==799== HEAP SUMMARY:
==799==     in use at exit: 2,376 bytes in 115 blocks
==799==   total heap usage: 764 allocs, 649 frees, 32,672 bytes allocated
==799== 
==799== LEAK SUMMARY:
==799==    definitely lost: 16 bytes in 1 blocks
==799==    indirectly lost: 448 bytes in 29 blocks
==799==      possibly lost: 0 bytes in 0 blocks
==799==    still reachable: 1,912 bytes in 85 blocks
==799==         suppressed: 0 bytes in 0 blocks
==799== Rerun with --leak-check=full to see details of leaked memory
==799== 
==799== For counts of detected and suppressed errors, rerun with: -v
==799== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 30000
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 30000
Running a simulation with 40000 draws for 3 hands...
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 40000
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
Could not find the win percent in your output
You dont seem to have the right total draws.
Yours sum to 0 but I expected 100000

Overall Grade: F
